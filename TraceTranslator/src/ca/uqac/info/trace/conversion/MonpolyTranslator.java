package ca.uqac.info.trace.conversion;

import java.util.Set;

import ca.uqac.info.ltl.Operator;
import ca.uqac.info.trace.Event;
import ca.uqac.info.trace.EventTrace;
import ca.uqac.info.util.Relation;

public class MonpolyTranslator implements Translator {
	
	protected final String m_logname = "log";
    
	@Override
	/**
	 * 
	 */
	public String translateTrace(EventTrace m_trace)
	{
		StringBuffer out = new StringBuffer();
	    Relation<String,String> domains = m_trace.getParameterDomain();
	    Set<String> params = domains.keySet();
	    out.append("-- Trace file automatically generated by\n-- Event Trace Converter\n\n");
	    
	    // Table contents
	    for (int i = 0; i < m_trace.size(); i++)
	    {
	      Event e = m_trace.elementAt(i);
	      if (!e.isFlat() || e.isMultiValued())
	      {
	        out.append("-- WARNING: this event is not flat or is multi-valued\n");
	      }
	      out.append(" @ ").append(i);
	      out.append(toMonpoly(e, params));
	      out.append("\n");
	      
	    }
	    return out.toString();
	}
	/**
	 * 
	 * @param e
	 * @param all_params
	 * @return
	 */
	private StringBuffer toMonpoly(Event e, Set<String> all_params)
	  {
	    StringBuffer out = new StringBuffer();
	    Relation<String,String> domain = e.getParameterDomain();
	    Set<String> params = domain.keySet();
	    
	    for (String p : all_params)
	    {
	    	String p_name = p ;
	     
	     
	      if (!params.contains(p))
	      {
	    	  out.append("\n\t").append(p_name).append(" ()");
	      }
	      else
	      {
	        Set<String> values = domain.get(p);
	        String val = "";
	        
	        for (String v : values)
	        {
	          val = v;
	          break;
	        }
	        
	        out.append("\n\t").append(p_name).append(" ( ").append(val).append(" ) ");

	      }
	    }
	    return out;
	  	 
	  }
	
	@Override
	/**
	 * 
	 */
	public String translateFormula(Operator o) {
		// TODO Auto-generated method stub
		return null;
	}
}
