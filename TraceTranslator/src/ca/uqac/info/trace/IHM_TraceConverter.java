/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.uqac.info.trace;

import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


import ca.uqac.info.trace.conversion.JavaMopTranslator;
import ca.uqac.info.trace.conversion.JsonTranslator;
import ca.uqac.info.trace.conversion.MonpolyTranslator;
import ca.uqac.info.trace.conversion.SmvTranslator;
import ca.uqac.info.trace.conversion.SqlTranslator;
import ca.uqac.info.trace.conversion.Translator;
import ca.uqac.info.trace.conversion.XesTranslator;
import ca.uqac.info.trace.conversion.XmlTranslator;

/**
 * @author Samatar
 */
public class IHM_TraceConverter extends javax.swing.JFrame {

    protected File myFile ;
    protected JFileChooser filechoose;
    protected int status ;
    protected boolean fieldsVisible;
    protected  String path_file ,output_format = "", input_filename = "";
    
    
    /**
     * 
     * Creates new form IHM_TraceConverter
     */
    public IHM_TraceConverter() {
        this.initComponents();
        this.fieldsVisible = false;
        initFields(fieldsVisible);
    }
    
   
	private void initFields(boolean bVisible)
    {
		this.lblTitre2.setVisible(bVisible);
    	this.comboBox.setVisible(bVisible);
    	this.lblTitre3.setVisible(bVisible);
    	btnConvertir.setVisible(bVisible);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
   
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LabTitre = new javax.swing.JLabel();
        lblTitre1 = new javax.swing.JLabel();
        bClick = new javax.swing.JButton();
        textFiel_path = new javax.swing.JTextField();
        lblTitre2 = new javax.swing.JLabel();
        comboBox = new javax.swing.JComboBox();
        btnConvertir = new javax.swing.JButton();
        lblTitre3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        btnClear = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        menuItem_Quit = new javax.swing.JMenuItem();
        menu_Edit = new javax.swing.JMenu();
        apropos_Item = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ConvEvenTrace");
        setAlwaysOnTop(true);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setForeground(new java.awt.Color(204, 204, 255));

        LabTitre.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        LabTitre.setText("                                Converter traces of events");
        LabTitre.setToolTipText("");

        lblTitre1.setText("   1.  Select File From Your Computer");

        bClick.setText("Browse");
        bClick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClickActionPerformed(evt);
            }
        });

        lblTitre2.setText("2.  Select output format");

        comboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "XML", "SQL", "SMV", "MONPOLY","XES","MOP","JSON"}));
        comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxActionPerformed(evt);
            }
        });

        btnConvertir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/load.GIF"))); // NOI18N
        btnConvertir.setToolTipText("Translate");
        btnConvertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertirActionPerformed(evt);
            }
        });

        lblTitre3.setText("3. Start Converting !!");

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/clear.GIF"))); // NOI18N
        btnClear.setToolTipText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblTitre2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lblTitre3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnConvertir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addComponent(LabTitre, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(bClick)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFiel_path, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblTitre1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 258, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabTitre, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTitre1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bClick)
                    .addComponent(textFiel_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTitre2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitre3)
                            .addComponent(btnConvertir, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 226, Short.MAX_VALUE)
                        .addComponent(btnClear))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        menu_file.setText("File");

        menuItem_Quit.setText("Quit");
        menuItem_Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_QuitActionPerformed(evt);
            }
        });
        menu_file.add(menuItem_Quit);

        jMenuBar1.add(menu_file);

        menu_Edit.setText("Help");

        apropos_Item.setText("About");
        apropos_Item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apropos_ItemActionPerformed(evt);
            }
        });
        menu_Edit.add(apropos_Item);

        jMenuBar1.add(menu_Edit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }

    /**
     *  Guess output format
     * @param evt
     */
    private void bClickActionPerformed(java.awt.event.ActionEvent evt) {
    	 
        filechoose = new JFileChooser();
       status = filechoose.showOpenDialog(this);
      
       if(fieldsVisible && (this.textFiel_path.getText().equalsIgnoreCase("")))
       {
    	   this.fieldsVisible = false;
    	   this.initFields(fieldsVisible);
       }
      
       if (status == JFileChooser.APPROVE_OPTION) 
       {
         myFile = filechoose.getSelectedFile();
         
         // Define and process command line arguments
         path_file = myFile.getAbsolutePath().replace("\\", "/");
         
        try 
        {
            this.textFiel_path.setText(path_file);  
            this.fieldsVisible = true;
            this.initFields(fieldsVisible);
            
        } catch (Exception ex) {
          System.out.println("problem accessing file : "+myFile.getAbsolutePath());
        }
        
    }     
   }
    /**
     * Exits the application
     * @param evt
     */
    private void menuItem_QuitActionPerformed(java.awt.event.ActionEvent evt) 
    {
    	
        System.exit(0);
    }

    /**
     * translate the trace output format
     * @param evt
     */
    private void btnConvertirActionPerformed(java.awt.event.ActionEvent evt) 
    {
        String   input_format;
        
        input_format = getExtension(path_file);
        
        // Determine which trace reader to initialize
        TraceReader reader = initializeReader(input_format);
        if (reader== null)
        {
          System.err.println("ERROR: Unrecognized input format");
          System.exit(1);
        }
             
        // Instantiate the proper trace reader and checks that the trace exists
        //reader.setEventTagName(event_tag_name);
        File in_f = new File(path_file);
        if (!in_f.exists())
        {
          System.err.println("ERROR: Input file not found");
          System.exit(1);
        }
        
        if (!in_f.canRead())
        {
          System.err.println("ERROR: Input file is not readable");
          System.exit(1);
        }
        
        // Determine which translator to initialize
        Translator trans = initializeTranslator(output_format);
        if (trans == null)
        {
          System.err.println("ERROR: Unrecognized output format");
          System.exit(1);
        }
        

        // Translate the trace into the output format
        EventTrace trace = reader.parseEventTrace(in_f);
        String out_trace = trans.translateTrace(trace);
        
     
        
        //display the trace 
        if (status == JFileChooser.APPROVE_OPTION) 
        {
            try 
            {  
                textArea.setText(out_trace );
            } catch (Exception ex) 
            {
            System.out.println("problem accessing file with "+this.textFiel_path.getText());
            }
        } else if (status == JFileChooser.CANCEL_OPTION) 
        {
            System.out.println("Opening the file has been canceled !!");
        } 
    
    }

    /**
     * Erase JtextArea
     * @param evt
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) 
    {
        textArea.setText("");
    }

    /**
     *  Guess output format by filename extension
     * @param evt
     */
    private void comboBoxActionPerformed(java.awt.event.ActionEvent evt) 
    {
        output_format = comboBox.getSelectedItem().toString().toLowerCase();
    }
    /**
     * window information
     * @param evt
     */
    private void apropos_ItemActionPerformed(java.awt.event.ActionEvent evt) 
    {
    	JOptionPane.showMessageDialog(this,
                                      " First version of the  converter "
                                       + " even trace\n"+ 
                                       "(C) 2012 \n",
                                      "Information",
                                      JOptionPane.INFORMATION_MESSAGE,null);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        try 
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IHM_TraceConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IHM_TraceConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IHM_TraceConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IHM_TraceConverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
       

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            IHM_TraceConverter fen = new IHM_TraceConverter();
            
            
            public void run() {
                fen.setVisible(true);
                fen.setLocationRelativeTo(null);
            }
        });
    }
    /**
     * Initialize the trace reader, based on the string passed from the
     * command-line
     * @param input_format The reader name
     * @return An instance of TraceFactory
     */
    private static TraceReader initializeReader(String input_format)
    {
      TraceReader tf = null;
      if ((input_format.compareToIgnoreCase("xml") == 0)|| (input_format.compareToIgnoreCase("xes") == 0))
      {
          tf = new XmlTraceReader();
      }
      else if (input_format.compareToIgnoreCase("sql") == 0)
      {
          tf = new SqlTraceReader();
      }
      else if (input_format.compareToIgnoreCase("csv") == 0)
      {
    	  
          tf = new CsvTraceReader();
      }
      return tf;
    }
    
    /**
     * Initialize the translator, based on the string passed from the
     * command-line
     * @param output_format The translator name
     * @return An instance of Translator
     */
    private static Translator initializeTranslator(String output_format)
    {
      Translator trans = null;
      
      if (output_format.compareToIgnoreCase("smv") == 0)
      {
          trans = new SmvTranslator();
      }
      else if (output_format.compareToIgnoreCase("sql") == 0)
      {
          trans = new SqlTranslator();
      }
      else if (output_format.compareToIgnoreCase("javamop") == 0)
      {
          trans = new JavaMopTranslator();
      }
      else if (output_format.compareToIgnoreCase("json") == 0)
      {
          trans = new JsonTranslator();
      }
      else if (output_format.compareToIgnoreCase("xml") == 0)
      {
          trans = new XmlTranslator();
      }
      else if(output_format.compareToIgnoreCase("monpoly")== 0)
      {
          trans = new MonpolyTranslator();
      }
      else if(output_format.compareToIgnoreCase("xes")== 0)
      {
          trans = new XesTranslator();
      }if(output_format.compareToIgnoreCase("mop")== 0)
      {
          trans = new JavaMopTranslator();
      }
      else if(output_format.compareToIgnoreCase("json")== 0)
      {
          trans = new JsonTranslator();
      }
      return trans;
    }
    
    /**
     * Return the filename extension (rightmost substring after last
     * period)
     * @return The extension
     */
    private static String getExtension(String filename)
    {
      int p = filename.lastIndexOf(".");
      if (p == -1)
        return filename;
      return filename.substring(p + 1);
    }
    // Variables declaration 
    private javax.swing.JLabel LabTitre;
    private javax.swing.JMenuItem apropos_Item;
    private javax.swing.JButton bClick;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnConvertir;
    private javax.swing.JComboBox comboBox;
    private javax.swing.JLabel lblTitre1;
    private javax.swing.JLabel lblTitre2;
    private javax.swing.JLabel lblTitre3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem menuItem_Quit;
    private javax.swing.JMenu menu_Edit;
    private javax.swing.JMenu menu_file;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField textFiel_path;
   
}
